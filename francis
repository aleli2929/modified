#include <iostream>
#include <string>
#include <iomanip>
#include <limits>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <sstream>

using namespace std;

// Function Prototypes
void inputNames(string* names, int count);
void inputGrades(float* grades, int count);
float getValidatedGrade(int studentNumber);
void displayStudentData(string* names, float* grades, int count);
float calculateAverage(float* grades, int count);
string generateUniqueFilename();
void saveToFile(string* names, float* grades, int count, const string& filename);
void displayFromFile(const string& filename);
void deleteFile(const string& filename);

int main() {
    int choice;
    string lastFilename = "";

    do {
        system("cls"); // Clear screen

        cout << "===== Student Info Menu =====\n";
        cout << "[1] Input and Save Student Data\n";
        cout << "[2] View Last Saved File\n";
        cout << "[3] Delete Last Saved File\n";
        cout << "[4] Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        cin.ignore(); // clear newline

        if (choice == 1) {
            int count;
            string* names = NULL;
            float* grades = NULL;

            cout << "Enter number of students: ";
            while (!(cin >> count) || count <= 0) {
                cout << "Invalid input. Enter a positive number: ";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            }
            cin.ignore();

            names = new string[count];
            grades = new float[count];

            inputNames(names, count);
            inputGrades(grades, count);

            cout << "\n=== Student Records ===\n";
            displayStudentData(names, grades, count);

            float avg = calculateAverage(grades, count);
            cout << fixed << setprecision(2);
            cout << "\nAverage Grade: " << avg << endl;

            lastFilename = generateUniqueFilename();
            saveToFile(names, grades, count, lastFilename);

            delete[] names;
            delete[] grades;
            names = NULL;
            grades = NULL;

            system("pause");
        }
        else if (choice == 2) {
            if (lastFilename == "") {
                cout << "No file has been saved yet.\n";
            } else {
                displayFromFile(lastFilename);
            }
            system("pause");
        }
        else if (choice == 3) {
            if (lastFilename == "") {
                cout << "No file to delete.\n";
            } else {
                deleteFile(lastFilename);
                lastFilename = "";
            }
            system("pause");
        }
        else if (choice == 4) {
            cout << "Exiting the program.\n";
        }
        else {
            cout << "Invalid choice.\n";
            system("pause");
        }

    } while (choice != 4);

    return 0;
}

void inputNames(string* names, int count) {
    for (int i = 0; i < count; i++) {
        cout << "Enter name for student " << (i + 1) << ": ";
        getline(cin, *(names + i));
    }
}

void inputGrades(float* grades, int count) {
    for (int i = 0; i < count; i++) {
        *(grades + i) = getValidatedGrade(i + 1);
    }
}

float getValidatedGrade(int studentNumber) {
    float grade;
    while (true) {
        cout << "Enter grade for student " << studentNumber << ": ";
        cin >> grade;

        if (!cin.fail() && grade >= 0 && grade <= 100) {
            break;
        } else {
            cout << "Invalid input. Please enter a number between 0 and 100.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
    }
    return grade;
}

void displayStudentData(string* names, float* grades, int count) {
    cout << left << setw(20) << "Name" << setw(10) << "Grade" << endl;
    for (int i = 0; i < 30; i++) cout << "-";
    cout << endl;

    for (int i = 0; i < count; i++) {
        cout << left << setw(20) << *(names + i) << setw(10) << *(grades + i) << endl;
    }
}

float calculateAverage(float* grades, int count) {
    float sum = 0;
    for (int i = 0; i < count; i++) {
        sum += *(grades + i);
    }
    return sum / count;
}

// Create a unique filename using timestamp
string generateUniqueFilename() {
    time_t now = time(0);
    tm* localTime = localtime(&now);

    stringstream ss;
    ss << "students_";
    ss << (1900 + localTime->tm_year);
    ss << (1 + localTime->tm_mon);
    ss << localTime->tm_mday;
    ss << "_";
    ss << localTime->tm_hour << localTime->tm_min << localTime->tm_sec;
    ss << ".txt";

    return ss.str();
}

void saveToFile(string* names, float* grades, int count, const string& filename) {
    ofstream outFile(filename.c_str());

    if (!outFile) {
        cout << "Error opening file.\n";
        return;
    }

    outFile << "Name,Grade\n";
    for (int i = 0; i < count; i++) {
        outFile << *(names + i) << "," << *(grades + i) << "\n";
    }

    outFile.close();
    cout << "\nData saved to " << filename << endl;
}

void displayFromFile(const string& filename) {
    ifstream inFile(filename.c_str());

    if (!inFile) {
        cout << "Error: File not found.\n";
        return;
    }

    string line;
    cout << "\n=== Contents of " << filename << " ===\n";
    while (getline(inFile, line)) {
        cout << line << endl;
    }

    inFile.close();
}

void deleteFile(const string& filename) {
    if (remove(filename.c_str()) == 0) {
        cout << "File \"" << filename << "\" deleted successfully.\n";
    } else {
        cout << "Error deleting file.\n";
    }
}
